// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsSuccess(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Success.String() && e.Code == 500
}

func ErrorSuccess(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_Success.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsGlobalServiceUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Global_Service_Unauthorized.String() && e.Code == 401
}

func ErrorGlobalServiceUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_Global_Service_Unauthorized.String(), fmt.Sprintf(format, args...))
}

func IsGlobalServiceForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Global_Service_Forbidden.String() && e.Code == 403
}

func ErrorGlobalServiceForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_Global_Service_Forbidden.String(), fmt.Sprintf(format, args...))
}

func IsGlobalServiceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Global_Service_NotFound.String() && e.Code == 404
}

func ErrorGlobalServiceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_Global_Service_NotFound.String(), fmt.Sprintf(format, args...))
}

func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAMS.String() && e.Code == 500
}

func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

func IsBlogInvalidId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BLOG_INVALID_ID.String() && e.Code == 500
}

func ErrorBlogInvalidId(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BLOG_INVALID_ID.String(), fmt.Sprintf(format, args...))
}

// create article tx failed
func IsCreateArticleFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CreateArticleFailed.String() && e.Code == 500
}

// create article tx failed
func ErrorCreateArticleFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CreateArticleFailed.String(), fmt.Sprintf(format, args...))
}

func IsCreateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CreateError.String() && e.Code == 500
}

func ErrorCreateError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CreateError.String(), fmt.Sprintf(format, args...))
}

func IsGetUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetUserIdFailed.String() && e.Code == 400
}

func ErrorGetUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_GetUserIdFailed.String(), fmt.Sprintf(format, args...))
}
